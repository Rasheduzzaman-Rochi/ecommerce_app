// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart'; // Import flutter_dotenv

/// Default [FirebaseOptions] for use with your Firebase apps.
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WEB_API_KEY'] ?? 'default-web-api-key',
      appId: '1:804963147405:web:d1fa1e83184e9f3ba2ccc4',
      messagingSenderId: '804963147405',
      projectId: 'ecomerce-app-e68d0',
      authDomain: 'ecomerce-app-e68d0.firebaseapp.com',
      storageBucket: 'ecomerce-app-e68d0.firebasestorage.app',
      measurementId: 'G-SPMWRF2MS9',
    );
  }

  static FirebaseOptions get android {
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_ANDROID_API_KEY'] ?? 'default-android-api-key',
      appId: '1:804963147405:android:cff3883d5cc9bdc9a2ccc4',
      messagingSenderId: '804963147405',
      projectId: 'ecomerce-app-e68d0',
      storageBucket: 'ecomerce-app-e68d0.firebasestorage.app',
    );
  }

  static FirebaseOptions get ios {
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_IOS_API_KEY'] ?? 'default-ios-api-key',
      appId: '1:804963147405:ios:3367a9ecb28a488ca2ccc4',
      messagingSenderId: '804963147405',
      projectId: 'ecomerce-app-e68d0',
      storageBucket: 'ecomerce-app-e68d0.firebasestorage.app',
      iosBundleId: 'com.example.ecommerceApp',
    );
  }
}
